- hosts: localhost
  vars:
    archive_dir: /work/archives
    lxc_dir: /usr/local/var/lib/lxc
    repo_dir: /work/image
    base_container: lvsbase-v1-0
    container_name: lvs1-v1-0
    container_dir: "{{ lxc_dir }}/{{ container_name }}"
    
    real_web1_ip: 192.168.10.50
    real_web1_port: 80
    real_web2_ip: 192.168.10.51
    real_web2_port: 80
    VIRTUAL_SERVER_IP: 10.10.1.110
    VIRTUAL_SERVER_PORT: 80
    LVS_VLAN1_IP: 10.10.1.11/24
    LVS_MYVLAN_IP: 192.168.10.11/24
    
  connection: local
  tasks:
    #- name: Copy base container
    #synchronize: >
    #  src={{ repo_dir }}/{{ base_container }}/
    #  dest={{ repo_dir }}/{{ clone_container }}
    #  recursive=yes
    #shell: >-
    #  rsync -Ha {{ repo_dir }}/{{ base_container}}/{{ item }}
    #  {{ repo_dir }}/{{ clone_container }}/
    #with_items:
    #  - rootfs
    #  - config
    #  - fstab
  - name: Create container directory
    file: path={{ container_dir }} state=directory
  - name: Extract base container
    shell: tar xfz {{ repo_dir }}/{{ base_container }}.tar.gz
    args:
      chdir: '{{ container_dir }}'

      
  - name: Edit hostname
    shell: echo "{{ container_name }}" > {{ container_dir }}/rootfs/etc/hostname
    
  - name: Edit config for local running
    lineinfile: >
      dest={{ container_dir }}/config
      regexp='{{ item.regexp }}'
      line='{{ item.line }}'
    with_items:
    - regexp: 'lxc.utsname'
      line: 'lxc.utsname = {{ container_name }}'
    - regexp: 'lxc.rootfs'
      line: 'lxc.rootfs = {{ container_dir }}/rootfs'
    - regexp: 'lxc.network.hwaddr'
      line: 'lxc.network.hwaddr = 00:16:3e:xx:xx:xx'
    - regexp: 'lxc.mount'
      line: 'lxc.mount = {{ container_dir }}/fstab'

  - name: Keepalived config
    template: >
      src=template/keepalived.conf.j2
      dest={{ container_dir }}/rootfs/etc/keepalived/keepalived.conf
      owner=root
      group=root
      mode=0644

  - name: Create Directory for LVS Setup
    file: state=directory path={{ container_dir }}/rootfs/work
    
  - name: LVS Setup
    template: >
      src='{{ item.src }}' 
      dest='{{ item.dest }}'
      owner=root
      group=root
      mode='{{ item.mode }}'
    with_items:
      - src: template/lvs_setup.sh.j2
        dest: '{{ container_dir }}/rootfs/work/lvs_setup.sh'
        mode: '0755'
      - src: template/lvs-setup.service.j2
        dest: '{{ container_dir }}/rootfs/etc/systemd/system/lvs-setup.service'
        mode: '0644'
        
  - name: Enable lvs-setup.service
    file: >
      path='{{ container_dir }}/rootfs/etc/systemd/system/multi-user.target.wants/lvs-setup.service'
      src='../lvs-setup.service'
      state=link
      
  - name: run container
    lxc_container:
      name: "{{ container_name }}"
      state: stopped

  - name: Create lxc config for production
    template: >
      src=template/lvs-config.j2
      dest={{container_dir}}/config.prd
      mode=0644

  - name: Archive rootfs for copy
    shell: tar c config.prd rootfs | gzip > {{ archive_dir }}/{{ container_name }}.tar.gz
    args:
      chdir: '{{ container_dir }}'

- hosts: lvs1dep
  vars:
    local_archive_dir: /work/archives
    remote_archive_dir: /tmp
    lxc_dir: /var/lib/lxc
    container_name: lvs1-v1-0
    container_dir: '{{ lxc_dir }}/{{ container_name }}'
    
  tasks:
  - name: Copy container archive
    copy: >
      src={{ local_archive_dir }}/{{ container_name }}.tar.gz
      dest={{ remote_archive_dir }}/{{ container_name }}.tar.gz
      
  - name: Create container directory
    file: path={{ container_dir }} state=directory
    
  - name: Extract container archive
    shell: tar xfz {{ remote_archive_dir }}/{{ container_name }}.tar.gz
    args:
      chdir: '{{ lxc_dir }}/{{ container_name }}/'

  - name: Remove archive
    file: path={{ remote_archive_dir }}/{{ container_name }}.tar.gz state=absent
    
  - name: Rename lxc config 
    shell: mv config.prd config
    args:
      chdir: '{{ container_dir }}'

  - name: Load ip_vs modules on host
    shell: modprobe ip_vs
    
  - name: Start Container
    shell: lxc-start -n {{ container_name }} -d
    

      